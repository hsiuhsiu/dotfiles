" ------- Encoding ------------------------------------------------------------
scriptencoding utf-8
set encoding=utf-8
set termencoding=utf-8
set fileencodings=utf-8,ucs-bom,sjis,big5,latin1


" ------- Coloring ------------------------------------------------------------
syntax on
hi CursorLine cterm=NONE ctermbg=0
hi CursorLineNr ctermbg=0 ctermfg=228
set cursorline

" If no screen, use color term
if ($TERM == "vt100")
    " xterm-color / screen
    set t_Co=8
    set t_AF=[1;3%p1%dm
    set t_AB=[4%p1%dm
endif


" ------- General -------------------------------------------------------------
set nocompatible
filetype indent plugin on
set wildmode=longest:full,full
set ai
set number
set mouse=a
set ruler
set colorcolumn=80
set cmdheight=2
set listchars=eol:Â¬,tab:â”Š\ 
set list
set tabstop=4
set shiftwidth=4
set softtabstop=4
set expandtab
set splitbelow
set splitright
set showmatch
set bs=2 " allow backspacing over everything in insert mode
set scrolloff=3
set foldmethod=indent
set foldcolumn=2
set foldlevel=3
set autoread
set nohlsearch
set viminfo='20,\"50 " read/write a .viminfo file, don't store more


" ------- Status Line ---------------------------------------------------------
"set noshowmode
"set tabline="%1T"
set laststatus=2

hi statuslineC1 ctermbg=238 ctermfg=248
hi statuslineC2 ctermbg=236 ctermfg=248
hi statuslineC3 ctermbg=238 ctermfg=248
hi statuslineC4 ctermbg=240 ctermfg=248

function! GitBranch()
  return system("git rev-parse --abbrev-ref HEAD 2>/dev/null | tr -d '\n'")
endfunction

function! StatuslineGit()
  let l:branchname = GitBranch()
  return strlen(l:branchname) > 0?l:branchname:''
endfunction

" Find out current buffer's size and output it.
function! FileSize()
  let bytes = getfsize(expand('%:p'))
  if (bytes >= 1024)
    let kbytes = bytes / 1024
  endif
  if (exists('kbytes') && kbytes >= 1000)
    let mbytes = kbytes / 1000
  endif

  if bytes <= 0
    return '0'
  endif

  if (exists('mbytes'))
    return mbytes . 'MB '
  elseif (exists('kbytes'))
    return kbytes . 'KB '
  else
    return bytes . 'B '
  endif
endfunction

set statusline+=%#statuslineC1#
set statusline+=\ (%{StatuslineGit()})
set statusline+=\ %F%m%r%h%w
set statusline+=\ %#statuslineC2#
set statusline+=%=
"set statusline+=\ %-3(%{FileSize()}%)
set statusline+=\ %{&ff}â”Š\ %Yâ”Š\ %{&fileencoding?&fileencoding:&encoding}
set statusline+=\ %#statuslineC3#
set statusline+=\ \%03.3b=0x%02.2B
set statusline+=\ %#statuslineC4#
set statusline+=\ %l/%L:%v\ 


" ------- Highlights ----------------------------------------------------------
highlight ColorColumn ctermbg=0
call matchadd('ColorColumn', '\%81v')

" highlight Tab guibg=grey ctermbg=0
" call matchadd('Tab', '\t')
"
" highlight ExtraWhitespace guibg=grey ctermfg=0
" call matchadd('ExtraWhitespace', '\s\+$')


" ------- Toggles / Short cuts ------------------------------------------------
:command W w
:command Q q
set pastetoggle=<C-p>
nmap <C-Char-63> :set hls! <cr>
nnoremap / :set hlsearch<cr>/
nnoremap <space> za
nnoremap <F9> :!%:p<cr>


" ------- Backup --------------------------------------------------------------
set backupdir=~/.vim/vim-backup,.,/var/tmp/vi.recover,/tmp
set undodir=~/.vim/vim-undo,.,/var/tmp/vi.recover,/tmp
set directory=~/.vim/vim-backup,/var/tmp/vi.recover,/tmp,.
set backup


" ------- Tab key binding -----------------------------------------------------
if version >= 700
    map  <C-t> :tabnew<CR>
    imap <C-t> <ESC>:tabnew<CR>
    map  <C-q> :tabclose<CR>
    map  <C-h> :tabprev<CR>
    imap <C-h> <ESC>:tabprev<CR>
    map  <C-l> :tabnext<CR>
    imap <C-l> <ESC>:tabnext<CR>
    "map <F4> :set invcursorline<CR>

    map g1 :tabn 1<CR>
    map g2 :tabn 2<CR>
    map g3 :tabn 3<CR>
    map g4 :tabn 4<CR>
    map g5 :tabn 5<CR>
    map g6 :tabn 6<CR>
    map g7 :tabn 7<CR>
    map g8 :tabn 8<CR>
    map g9 :tabn 9<CR>
    map g0 :tabn 10<CR>
    map gc :tabnew<CR>
    map gn :tabn<CR>
    map gp :tabp<CR>

    highlight TabLineSel ctermfg=232 ctermbg=7
    highlight TabLine    ctermfg=10  ctermbg=0
    highlight clear TabLineFill
end


" ------- Specific Files ------------------------------------------------------
" nginx configuration
au BufRead,BufNewFile /etc/nginx/sites-*/* setfiletype conf
au BufRead,BufNewFile ~/nginx/* setfiletype conf

" Crontabs must be edited in place
au BufRead /tmp/crontab* :set backupcopy=yes

